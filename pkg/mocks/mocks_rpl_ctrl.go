// Code generated by MockGen. DO NOT EDIT.
// Source: replayer/controller/controller.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/crossedbot/hermes-archiver/pkg/replayer/models"
	gomock "github.com/golang/mock/gomock"
)

// MockReplayerController is a mock of Controller interface.
type MockReplayerController struct {
	ctrl     *gomock.Controller
	recorder *MockReplayerControllerMockRecorder
}

// MockReplayerControllerMockRecorder is the mock recorder for MockReplayerController.
type MockReplayerControllerMockRecorder struct {
	mock *MockReplayerController
}

// NewMockReplayerController creates a new mock instance.
func NewMockReplayerController(ctrl *gomock.Controller) *MockReplayerController {
	mock := &MockReplayerController{ctrl: ctrl}
	mock.recorder = &MockReplayerControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReplayerController) EXPECT() *MockReplayerControllerMockRecorder {
	return m.recorder
}

// Replay mocks base method.
func (m *MockReplayerController) Replay(id string) (models.Replay, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Replay", id)
	ret0, _ := ret[0].(models.Replay)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Replay indicates an expected call of Replay.
func (mr *MockReplayerControllerMockRecorder) Replay(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replay", reflect.TypeOf((*MockReplayerController)(nil).Replay), id)
}
